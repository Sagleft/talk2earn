package main

import (
	"bytes"
	"log"
	"os/exec"
	"strconv"
	"time"

	tb "github.com/Sagleft/telegobot"
	"github.com/google/logger"
)

func (app *solution) tgMessageFilter(upd *tb.Update) bool {
	if upd.Message == nil {
		return true
	}

	return true
}

func (app *solution) getTgPoller() *tb.MiddlewarePoller {
	poller := &tb.LongPoller{Timeout: 15 * time.Second}
	return tb.NewMiddlewarePoller(poller, app.tgMessageFilter)
}

func (app *solution) tgConnect() error {
	var err error
	app.TelegramBot, err = tb.NewBot(tb.Settings{
		Token:  app.Config.TelegramBotToken,
		Poller: app.getTgPoller(),
	})
	return err
}

func (app *solution) setupHandlers(handlers []handlerPair) {
	if len(handlers) == 0 {
		log.Println("handlers is not set")
		return
	}
	for _, pair := range handlers {
		app.TelegramBot.Handle(pair.endpoint, pair.handler)
	}
}

func (app *solution) runTelegramBot() error {
	app.TelegramHandlers = []handlerPair{
		{"/start", app.handleStart, "—É–∑–Ω–∞—Ç—å —Å–≤–æ–π telegram ID"},
		{"/reboot", app.handleReboot, "–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –≤–µ—Å—å —Å–µ—Ä–≤–µ—Ä (–ø–æ–ø—Ä–æ—Å–∏—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ)"},
		{"/confirmreboot", app.confirmHandleReboot, "–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫—É"},
		{"/restartutopia", app.handleRestartUtopia, "–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–∏—Å —É—Ç–æ–ø–∏–∏"},
		{"/restartbot", app.handleRestartBot, "–ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–µ—Ä–≤–∏—Å –±–æ—Ç–∞"},
		{"/contacts", app.getContacts, "–ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω–∞ (—Å —É—á–µ—Ç–æ–º –∫–∞–Ω–∞–ª–∞) —Ñ–∞–π–ª–æ–º"},
		{"/onlinecount", app.getOnlineCount, "—É–∑–Ω–∞—Ç—å —á–∏—Å–ª–æ –æ–Ω–ª–∞–π–Ω–∞"},
		{tb.OnText, app.handleTextRequest, ""},
	}
	app.setupHandlers(app.TelegramHandlers)

	go app.TelegramBot.Start()
	return nil
}

func (app *solution) getOnlineCount(m *tb.Message) {
	if !app.checkTelegramAccess(m) {
		return
	}

	contactsData, err := app.getContactsData()
	if err != nil {
		app.returnErrorToSender(m, err)
		return
	}

	msg := "–í—Å–µ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: " + strconv.Itoa(contactsData.Contacts) + "\n"
	msg += "–ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ–Ω–ª–∞–π–Ω: " + strconv.Itoa(contactsData.ContactsOnline) + "\n"
	msg += "–û–Ω–ª–∞–π–Ω –≤ –∫–∞–Ω–∞–ª–µ: " + strconv.Itoa(contactsData.ChannelOnline) + "\n"
	msg += "–ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ –æ–Ω–ª–∞–π–Ω –≤ –∫–∞–Ω–∞–ª–µ: " + strconv.Itoa(contactsData.ContactsInChannel)

	app.TelegramBot.Send(m.Sender, msg)
}

func (app *solution) getMessages() string {
	msg := ""
	for i := 0; i < len(app.TelegramHandlers); i++ {
		h := app.TelegramHandlers[i]
		if h.description != "" {
			msg += h.endpoint.(string) + " - " + h.description + "\n"
		}
	}
	return msg
}

func (app *solution) handleStart(m *tb.Message) {
	app.TelegramBot.Send(m.Sender, strconv.FormatInt(m.Sender.ID, 10))
}

type getContactsResult struct {
	CSV               string
	Contacts          int
	ContactsOnline    int
	ChannelOnline     int
	ContactsInChannel int
}

func (app *solution) getContactsData() (*getContactsResult, error) {
	contacts, err := app.Config.UtopiaCfg.GetContacts("")
	if err != nil {
		return nil, err
	}

	channelOnline, err := app.getChannelOnline()
	if err != nil {
		return nil, err
	}
	channelOnlineMap := app.getChannelOnlineMap(channelOnline)

	result := getContactsResult{
		Contacts:      len(contacts),
		ChannelOnline: len(channelOnlineMap),
	}
	result.CSV = "nick, pubkey, online, online in channel"
	for _, contact := range contacts {
		result.CSV += "\n" + contact.Nick + ", " + contact.Pubkey

		if app.isUserInOnlineData(contact.Pubkey) {
			result.ContactsOnline++
			result.CSV += ", +"
		} else {
			result.CSV += ", -"
		}

		_, isOnlineInChannel := channelOnlineMap[contact.Nick]
		if isOnlineInChannel {
			result.CSV += ", +"
			result.ContactsInChannel++
		} else {
			result.CSV += ", -"
		}
	}

	return &result, nil
}

func (app *solution) returnErrorToSender(m *tb.Message, err error) {
	_, err2 := app.TelegramBot.Send(m.Sender, "ERROR: "+err.Error())
	if err2 != nil {
		logger.Error(err2)
	}
}

func (app *solution) getContacts(m *tb.Message) {
	contactsData, err := app.getContactsData()
	if err != nil {
		app.returnErrorToSender(m, err)
		return
	}

	dataBytes := []byte(contactsData.CSV)
	reader := bytes.NewReader(dataBytes)

	_, err = app.TelegramBot.Send(m.Sender, &tb.Document{
		File:     tb.FromReader(reader),
		MIME:     "text/plain",
		FileName: "contacts.txt",
	})
	if err != nil {
		app.returnErrorToSender(m, err)
	}
}

func (app *solution) checkTelegramAccess(m *tb.Message) bool {
	if !app.isUserTelegramModerator(m.Sender.ID) {
		_, err := app.TelegramBot.Send(m.Sender, &tb.Audio{
			File:    tb.FromDisk("access_denied.mp3"),
			Caption: "üîí",
		})
		if err != nil {
			logger.Error(err)
		}
		return false
	}

	return true
}

func (app *solution) checkRebootsFeatureDisabled(m *tb.Message) bool {
	if app.Config.RebootsByUserDisabled {
		_, err := app.TelegramBot.Send(m.Sender, "—Ñ–∏—á–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞")
		if err != nil {
			logger.Error(err)
			return true
		}
	}
	return app.Config.RebootsByUserDisabled
}

func (app *solution) handleReboot(m *tb.Message) {
	if !app.checkTelegramAccess(m) {
		return
	}

	if app.checkRebootsFeatureDisabled(m) {
		return
	}

	_, err := app.TelegramBot.Send(
		m.Sender,
		"–ê –º–æ–∂–µ—Ç –Ω–µ –Ω–∞–¥–æ? –ú–æ–∂–µ—Ç –ª—É—á—à–µ —á–µ—Ä–µ–∑ /restartbot ? –∏–ª–∏ /restartutopia ?\n\n–ù—É –∞ –µ—Å–ª–∏ –≤—Å—ë —Å–æ–≤—Å–µ–º –ø–ª–æ—Ö–æ...\n/confirmreboot",
	)
	if err != nil {
		logger.Error(err)
		return
	}
}

func (app *solution) confirmHandleReboot(m *tb.Message) {
	if !app.checkTelegramAccess(m) {
		return
	}

	if app.checkRebootsFeatureDisabled(m) {
		return
	}

	_, err := app.TelegramBot.Send(m.Sender, "–°–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã..")
	if err != nil {
		logger.Error(err)
		return
	}

	time.Sleep(time.Second * 3)
	r := exec.Command("reboot")
	err = r.Run()
	if err != nil {
		logger.Error(err)
		app.TelegramBot.Send(m.Sender, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–±—É—Ç–∏—Ç—å: "+err.Error())
	}
}

func (app *solution) handleRestartUtopia(m *tb.Message) {
	if !app.checkTelegramAccess(m) {
		return
	}

	if app.checkRebootsFeatureDisabled(m) {
		return
	}

	_, err := app.TelegramBot.Send(m.Sender, "U –∏ –±–æ—Ç –±—É–¥—É—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã..")
	if err != nil {
		logger.Error(err)
		return
	}

	err = doUtopiaReboot()
	if err != nil {
		app.TelegramBot.Send(m.Sender, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å: "+err.Error())
	}
}

func (app *solution) handleRestartBot(m *tb.Message) {
	if !app.checkTelegramAccess(m) {
		return
	}

	if app.checkRebootsFeatureDisabled(m) {
		return
	}

	_, err := app.TelegramBot.Send(m.Sender, "–ë–æ—Ç –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã..")
	if err != nil {
		logger.Error(err)
		return
	}

	time.Sleep(time.Second * 3)
	r := exec.Command("/usr/bin/systemctl", "restart", "bankbot")
	err = r.Run()
	if err != nil {
		logger.Error(err)
		app.TelegramBot.Send(m.Sender, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å: "+err.Error())
	}
}

func (app *solution) handleTextRequest(m *tb.Message) {
	if !app.checkTelegramAccess(m) {
		return
	}

	messages, err := app.handleModeratorRequest(m.Text, true, m.Sender.ID)
	if err != nil {
		_, tgErr := app.TelegramBot.Send(m.Sender, "ERROR: "+err.Error())
		if tgErr != nil {
			logger.Error(tgErr)

			app.TelegramBot.Send(m.Sender, "ERROR: "+tgErr.Error())
		}
		return
	}

	for i := 0; i < len(messages); i++ {
		_, tgErr := app.TelegramBot.Send(m.Sender, messages[i])
		if tgErr != nil {
			logger.Error(tgErr)

			app.TelegramBot.Send(m.Sender, "ERROR: "+tgErr.Error())
		}
	}
}

type sendNotifyTask struct {
	Nickname string
	Amount   float64
}

func (app *solution) sendWithdrawNotify(task sendNotifyTask) error {
	if isOver, _ := app.WithdrawNotifyRateLimiter.Try(); !isOver {
		return nil
	}

	if task.Nickname == "" {
		task.Nickname = "Anonymous"
	}

	if task.Amount < app.Config.MinWithdraw {
		// –Ω–µ –æ–ø–æ–≤–µ—â–∞–µ–º –æ –≤—ã–≤–æ–¥–∞—Ö –º–µ–Ω—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ
		return nil
	}

	// send notify to telegram
	if app.Config.TelegramNotifyChatID != 0 {

		msg := "üé©  *–ò–≥—Ä–æ–∫ " + task.Nickname + "* –≤—ã–≤–µ–ª\n" +
			getRandomTgEmoji() + "  *" + strconv.FormatFloat(task.Amount, 'f', 0, 64) + "* " + app.Config.CoinsWithdrawLabel

		if _, err := app.TelegramBot.Send(tb.ChatID(app.Config.TelegramNotifyChatID), msg, tb.ModeMarkdown); err != nil {
			return err
		}

	}

	// TODO: send to U?

	return nil
}
